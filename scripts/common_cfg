
# ==================================================================
#                OpenShift API Server Config
# ==================================================================

# Cloud instance connection details
API_CLOUD=https://api.cluster-trc9t.trc9t.sandbox3159.opentlc.com:6443

# Local CodeReadyContainers connection details
API_CRC=https://api.crc.testing:6443

# ==================================================================
#                OpenShift Credential Config
# ==================================================================

# Cloud Server Auth Tokens
TOKEN_ADMIN=sha256~63slZthCU-CE6r0WFVDVUgvx34Her6EJivJ1qK1kHF8
TOKEN_DEV=sha256~Z0ZKqtwY0598DNlSrKqj7VnfF01K4D-ZBaBPzz7dc1Y

# oc login command for cloud instance of openshift (using tokens)
#OC_LOGIN_KUBEADMIN='--token='"${TOKEN_ADMIN}"' --server='"${API_CLOUD}"''
#OC_LOGIN_DEVELOPER='--token=${TOKEN_DEV} --server='"${API_CLOUD}"''

# oc login command for cloud instance of openshift (using credentials)
#OC_LOGIN_KUBEADMIN='-u kubeadmin -p Si3Wz-AwIKL-jQ3NX-xoojX '"${API_CLOUD}"''
#OC_LOGIN_DEVELOPER='-u developer -p developer '"${API_CLOUD}"''

# oc login command for CRC instance (using credentials)
OC_LOGIN_KUBEADMIN="-u kubeadmin -p redhat! ${API_CRC}"
OC_LOGIN_DEVELOPER="-u developer -p developer ${API_CRC}"

# ==================================================================
#                quay.io credentials
# ==================================================================
QUAY_USER=<QUAY USER ID>
QUAY_TOKEN=<TOKEN GENERATED BY QUAY>


# ==================================================================


# ==================================================================
#                Convenience methods
# ==================================================================

# checking if oc command is installed/resolvable
# if oc binary is not resolvable check to see if CRC is installed
# if so use CRC provided oc binary
command -v oc > /dev/null 2>&1
if [ "$?" == "1" ];then
  #checking if CodeReadyContainers is installed/resolvable
  command -v crc > /dev/null 2>&1
  if [ "$?" == "0" ];then
    eval $(crc oc-env)
  else
    echo "Cannot find oc command.  Exiting.."
    exit 1;
  fi
fi


# Test to see if a project currently exists
isProject()
  {
    oc get "project/${1}" > /dev/null 2>&1
    if [ "$?" == "0" ];then
      # 0 = true
      return 0
    else
      # 1 = false
      return 1
    fi
  }

# Error check
failChk()
  {
    COMMAND=$@
   # $(${COMMAND}) 
    eval "${COMMAND}"
    if [ $? -gt 0 ]; then
        printf "\n\n     ==============================================================\n"
        printf "       Error executing: '${COMMAND}'\n"
        printf "     ==============================================================\n"
        exit 1;
    fi
  }

# ==================================================================

